Big	security	idea Split system	into modules, each with their own	privilege
Idea: if one module is compromised, then other modules won't be

Use often:
Virtual machines (e.g., run web site in its own virtual machine)
SSH (seperates	sshd, agent)


Challenges:
Modules need to share
Need OS	support
Need to	use	OS carefully	to set	things up correctly
Performance


Background: security and protection in Unix
user IDs, group IDs (32-bit	integers)
Superuser principal (root) represented by uid=0, bypasses most checks

Background: traditional web server architecture (Apache).
Apache runs N identical processes, handling HTTP requests.
•	 All processes run as user 'www'.
•	 Application code (e.g. PHP) typically runs inside each of N apache processes.
•	 Any accesses to OS state (files, processes, ...) performed by www's UID.
Problem: if any component is compromised, adversary gets all the data.


What kind of attacks might occur in a web application?
o	 Unintended	data	disclosure	(getting	page source code, hidden files,	..)
o	 Remote code execution (e.g., buffer overflow in Apache)
o	 Buggy application	code (hard to write secure PHP	code),	e.g.	SQL inj.
o Attacks on web browsers (cross-site scripting	attacks)

OKWS
Interesting	case	study	of privilege	separation
Lots	of sharing between services
Lots	of code
Not widely	used	outside	of OKcupid
Many web	sites have their privilege separation	plan
But no papers describing	their plans


OKWS: what's	their application / motivation?
"aspects most vulnerable to attack are least useful	to attackers"
Dating web site:	worried	about data secrecy.
• Not so worried about adversary breaking in and sending spam.
• Lots	of server-side code execution: matching, profile updates, ...



Why is this hard?
Unix makes it tricky to reduce privileges (chroot, UIDs, ..)
Applications need to share state in complicated ways.
Unix and SQL databases	don't have fine-grained sharing control mechanisms

How does OKWS partition the	web server?

okd -> oklogd
-> pubd
-> svc -> dbproxy
-> oklogd
 

o Probably many front-end machines (okld, okd, pubd, oklogd, svc)
o Several DB machines (dbproxy, DB)



How do these components interact?
okld	sets	up socketpairs	(bidirectional pipes)	for each	service
One socketpair for control	RPC requests
Services	talk to DB	proxy	over TCP

How does OKWS enforce isolation between components ?
Each service	runs	as	a separate	UID	and	GID.
• chroot used to confine each process to a separate directory (almost).
• Components communicate via pipes (or rather, Unix domain socket pairs).
• File	descriptor	passing used	to	pass	around	HTTP connections


Why does okld need to run	as root?


What	does it	take for okld to launch a service?
o	 Create	socket pairs
o	 Get new socket to	oklogd
o	 fork,	setuid/setgid,	exec	the	service
o	 Pass control sockets	to	okd


What's the point	of oklogd?
What's the point	of pubd?


Why not	process per user?	 Is per user strictly better?	 user X service?
Per-service isolation probably made sense for okcupid given their apps.
(i.e. perhaps	they	need a lot of sharing	between	users anyway?)
o	 Per-user isolation requires allocating UIDs per user, complicating okld,
and reducing performance (though may still be OK for some use cases).


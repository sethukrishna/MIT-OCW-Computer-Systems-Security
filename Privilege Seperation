Big security idea Split system	into modules, each with their own privilege
Idea: if one module is compromised, then other modules won't be

Use often:
Virtual machines (e.g., run web site in its own virtual machine)
SSH (seperates	sshd, agent)


Challenges:
Modules need to share
Need OS	support
Need to	use OS carefully to set	things up correctly
Performance


Background: traditional web server architecture (Apache).
Apache runs N identical processes, handling HTTP requests.
All processes run as user 'www'.
Application code (e.g. PHP) typically runs inside each of N apache processes.
Any accesses to OS state (files, processes, ...) performed by www's UID.
Problem: if any component is compromised, adversary gets all the data.


What kind of attacks might occur in a web application?
Unintended data	disclosure (getting page source code, hidden files,..)
Remote code execution (e.g., buffer overflow in Apache)
Buggy application code (hard to write secure PHP	code),	e.g.	SQL inj.
Attacks on web browsers (cross-site scripting	attacks)

OKWS
Interesting case study of privilege separation
Lots of sharing between services
Lots of code
Not widely used	outside	of OKcupid
Many web sites have their privilege separation	plan
But no papers describing their plans


OKWS: what's	their application / motivation?
"aspects most vulnerable to attack are least useful	to attackers"
Dating web site: worried about data secrecy.
Not so worried about adversary breaking in and sending spam.
Lots of server-side code execution: matching, profile updates, ...


Why is this hard?
Unix makes it tricky to reduce privileges (chroot, UIDs, ..)
Applications need to share state in complicated ways.
Unix and SQL databases	don't have fine-grained sharing control mechanisms



How does OKWS partition the web server?

okd -> oklogd
-> pubd
-> svc -> dbproxy
-> oklogd

okd = Dispatcher, receives the requests
pubd = Will serve Index pages, Templates
svc = Service process
okld = Runs as a root

Probably many front-end machines (okld, okd, pubd, oklogd, svc)
Several DB machines (dbproxy, DB)




How does OKWS enforce isolation between components ?
Each service runs as a separate	UID and	GID.
chroot used to confine each process to a separate directory (almost).
Components communicate via pipes (or rather, Unix domain socket pairs).
File descriptor	passing used to	pass around HTTP connections


What does it take for okld to launch a service?
Create socket pairs
Get new socket to oklogd
fork, setuid/setgid, exec the service
Pass control sockets	to	okd
okld is the only service which runs as root


What's the effect of each component being compromised, and "attack surface"?

okld: root access to web server machine, but maybe not to DB.
attack surface: small (no user input other than svc exit).

okd: intercept/modify all user HTTP reqs/responses, steal passwords.
attack surface: parsing	the first line of HTTP request; control	requests.
pubd: corrupt templates, leverage to maybe exploit bug in some service?
attack surface: requests to fetch templates from okd.

oklogd: corrupt/ignore/remove/falsify log entries
attack surface: log messages from okd, okld, svcs

service: send garbage to user, access data for svc (modulo dbproxy)
attack surface: HTTP requests from users (+ control msgs from	okd)

dbproxy: access/change all user	data in the database it's talking to
attack surface: requests from	authorized services, requests from unauthorized services (easy	to drop)












